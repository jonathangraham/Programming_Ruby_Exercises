puts 'These are the TicTacToe positions'
board_positions = ['1', '2', '3', '4', '5', '6', '7', '8', '9']

def print_board(board)
	puts
	puts '   |   |'
	puts " #{board[0]} | #{board[1]} | #{board[2]} "
	puts '___|___|___'
	puts '   |   |'
	puts " #{board[3]} | #{board[4]} | #{board[5]} "
	puts '___|___|___'
	puts '   |   |'
	puts " #{board[6]} | #{board[7]} | #{board[8]} "
	puts '   |   |'
	puts
end

print_board(board_positions)


puts 'Lets start a new game'

board = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']

PotentialWinningLines = [[board[0],board[1],board[2]],[board[3],board[4],board[5]],[board[6],board[7],board[8]],[board[0],board[3],board[6]],[board[1],board[4],board[7]],[board[2],board[5],board[8]],[board[0],board[4],board[8]],[board[2],board[4],board[6]]]

puts 'Player is X, computer is O.'


def player_turn(board)
	print_board(board)
	puts 'Enter position to play'
	a = gets.chomp.to_i
	if board[a-1] == ' '
		board[a-1].replace 'X'
	else
		puts "not a valid space!"
		player_turn(board)
	end
	if win?(board) == true
		puts 'you win!'
	elsif draw?(board) == true
		puts 'draw, game over'
	else
		computer_turn(board)
	end
end

def computer_turn(board)
	print_board(board)
	if board.count(' ') == 9
		board[0].replace 'O'
		puts "computer plays position 1"
	elsif board.count(' ') == 8
		respond_first_play(board)
	elsif oneToWin(board)
	elsif oneToBlock(board)
	else
		a = rand(9)
		a = rand(9) while board[a] != ' '
			board[a].replace 'O'
			puts "computer plays position #{a+1}"
	end
	if win?(board) == true
		puts 'computer wins'
	elsif draw?(board) == true
		puts 'draw, game over'
	else
		player_turn(board)
	end
end

def win?(board)
	arrayOfBools = PotentialWinningLines.map do |innerArray|
		allCharsSame?(innerArray, 'X') || allCharsSame?(innerArray, 'O')   
	end
	arrayOfBools.include? true
end

def allCharsSame?(arr,findChar)
	matchedCharsFound = arr.select{|x| x == findChar}
	matchedCharsFound.length == arr.length
end

def oneToWin(board)
	arrayOfBools = PotentialWinningLines.map do |innerArray|
		twoCharsSame?(innerArray, 'O') if innerArray.include? (' ') 
	end
	if arrayOfBools.include? true
		winningLine = arrayOfBools.index{|x|x == true}
		spaceInWinningLine = PotentialWinningLines[winningLine].index{|x|x == ' '}
		PotentialWinningLines[winningLine][spaceInWinningLine].replace 'O'
		true
	end
end

def oneToBlock(board)
	arrayOfBools = PotentialWinningLines.map do |innerArray|
		twoCharsSame?(innerArray, 'X') if innerArray.include? (' ') 
	end
	if arrayOfBools.include? true
		winningLine = arrayOfBools.index{|x|x == true}
		spaceInWinningLine = PotentialWinningLines[winningLine].index{|x|x == ' '}
		PotentialWinningLines[winningLine][spaceInWinningLine].replace 'O'
		true
	end
end

def twoCharsSame?(arr,findChar)
	matchedCharsFound = arr.select{|x| x == findChar}
	matchedCharsFound.length == arr.length - 1
end

def draw?(board)
	board.count(' ') == 0
end

def respond_first_play(board)
	if board[4] == 'X'
		a = 0
	else 
		a = 4
	end
	board[a].replace 'O'
	puts "computer plays position #{a+1}"
	return a
end

def start(board)
	x = rand(2)
	if x == 0
		puts 'player starts'
		player_turn(board)
	else
		puts 'computer starts'
		computer_turn(board)
	end
end

start(board)
