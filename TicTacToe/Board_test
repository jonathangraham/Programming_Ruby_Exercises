require_relative 'Board'
require 'minitest/autorun'


class TestBoard < Minitest::Test

	Board_initial = Board.new([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '])
	Board_partial = Board.new(['X', 'O', 'X', ' ', 'O', ' ', ' ', 'O', ' '])
	Board_full = Board.new(['X', 'O', 'X', 'O', 'X', 'O', 'X', 'O', 'O'])
	
	def test_draw?
		assert_equal(false, Board_initial.draw?(Board_initial.data))
		assert_equal(false, Board_partial.draw?(Board_partial.data))
		assert_equal(true, Board_full.draw?(Board_full.data)) 
	end

	def test_win?
		assert_equal(false, Board_initial.win?(Board_initial.data, "X"))
		assert_equal(true, Board_partial.win?(Board_partial.data, 'O'))
		assert_equal(false, Board_partial.win?(Board_partial.data, 'X'))
		assert_equal(true, Board_full.win?(Board_full.data, 'X'))
		assert_equal(false, Board_full.win?(Board_full.data, 'O')) 
	end

	def test_available_spaces
		assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8], Board_initial.available_spaces(Board_initial.data))
		assert_equal([3, 5, 6, 8], Board_partial.available_spaces(Board_partial.data))
		assert_equal([], Board_full.available_spaces(Board_full.data))
	end

	def test_valid_move?
		assert_equal(true, Board_initial.valid_move?(Board_initial.data, 1))
		assert_equal(false, Board_initial.valid_move?(Board_initial.data, 10))
		assert_equal(true, Board_partial.valid_move?(Board_partial.data, 4))
		assert_equal(false, Board_partial.valid_move?(Board_partial.data, 5))
		assert_equal(false, Board_partial.valid_move?(Board_partial.data, 0))
	end

	def test_update_and_un_update
		assert_equal('X', Board_initial.update(Board_initial.data, 1, 'X'))
		assert_equal(' ', Board_initial.un_update(Board_initial.data, 1))
	end
end
