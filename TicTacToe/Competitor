class Competitor
	attr_accessor :letter, :name
	def initialize(letter, name) 
		@letter = letter
		@name = name
	end

	def update_move(board, move, player)
		puts "#{player} plays in space #{move}"
     	board.update(board.data, move, player)
    end
end

class Human < Competitor
	def initialize(letter)
		puts "What is player #{letter}'s name?"
		name = gets.chomp
		super(letter, name)
	end

	def move(board)
		selected_move = get_human_input
		if board.valid_move?(board.data, selected_move)
			update_move(board, selected_move, self.letter)
		else
			puts "Not a valid move. Please choose a free space on the board."
	  	 	move(board)
		end
	end

	def get_human_input
		puts 'Enter position to play'
		return gets.to_i
	end
end

class Computer < Competitor
	def initialize(letter)
		name = 'Computer'
		super(letter, name)
		
	end

	def move(board)
		selected_move = determine_play_method(board)
		update_move(board, @selected_move, self.letter)
	end

	def determine_play_method(board)
		if board.available_spaces(board.data).count == 9
			random_start_play
		else
			negamax(board, self.letter, 1)
		end
		return @selected_move
	end

	def random_start_play
		@selected_move = [1,3,5,7,9].sample
	end
	
	def negamax(board, current_marker, depth)
		opponent_marker = opponent(current_marker)
    	if board.game_over?(board.data, current_marker)
      		return score(board, current_marker, opponent_marker, depth)
    	else
      		best_rank = -999
      		board.available_spaces(board.data).each do |space|
        		board.update(board.data, space + 1, current_marker)
        		rank = -negamax(board, opponent_marker, depth + 1 )
       			board.un_update(board.data, space + 1)
	       			if rank > best_rank
	         			best_rank = rank
	         			if depth == 1
	         				@selected_move = space + 1
	         			end
					end
     		end
     		return best_rank
		end
	end

 	def opponent(marker)
      	marker == "X" ? "O" : "X"
    end

    def score(board, current_marker, opponent_marker, depth)
		if board.win?(board.data, current_marker) 
			return 100 - depth
		elsif board.win?(board.data, opponent_marker)
		    return -(100 - depth)
		else
		    return 0
		end
	end
end
