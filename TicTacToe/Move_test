require_relative 'Move'
require_relative 'Board'
require 'minitest/autorun'

class TestMove < Minitest::Test

	Move = Move.new

	def test_computer_move_first
		board_initial = Board.new([' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '])
		assert_equal(1, (Move.determine_play_method(board_initial, 'X'))%2)
	end

	def test_computer_move_to_win
		board1 = Board.new(['X', ' ', 'O', 'X', 'O', 'X', ' ', ' ', 'O'])
		board2 = Board.new(['X', 'O', ' ', 'O', 'X', ' ', ' ', ' ', ' '])
		assert_equal(7, Move.determine_play_method(board1, 'X'))
		assert_equal(7, Move.determine_play_method(board1, 'O'))
		assert_equal(9, Move.determine_play_method(board2, 'X'))
	end

	def test_computer_move_to_block
		board1 = Board.new(['X', 'O', 'X', ' ', 'O', ' ', ' ', ' ', ' '])
		board2 = Board.new(['X', 'O', ' ', 'O', 'X', ' ', ' ', ' ', ' '])
		assert_equal(8, Move.determine_play_method(board1, 'X'))
		assert_equal(9, Move.determine_play_method(board2, 'O'))
	end

	def test_computer_move_win_instead_block
		board1 = Board.new(['X', ' ', 'O', 'X', ' ', 'O', ' ', ' ', ' '])
		board2 = Board.new(['X', 'X', ' ', 'O', 'O', ' ', ' ', ' ', ' '])
		assert_equal(7, Move.determine_play_method(board1, 'X'))
		assert_equal(9, Move.determine_play_method(board1, 'O'))
		assert_equal(3, Move.determine_play_method(board2, 'X'))
		assert_equal(6, Move.determine_play_method(board2, 'O'))
	end

	def test_computer_move_fork
		board1 = Board.new(['O', ' ', ' ', ' ', ' ', ' ', 'X', 'O', 'X'])
		assert_equal(3, Move.determine_play_method(board1, 'X'))
		assert_equal(2, Move.determine_play_method(board1, 'O'))
	end

	def test_computer_move_block_fork
		board1 = Board.new([' ', ' ', 'O', ' ', 'X', ' ', 'O', ' ', ' '])
		assert_equal(2, Move.determine_play_method(board1, 'X'))
	end
end
