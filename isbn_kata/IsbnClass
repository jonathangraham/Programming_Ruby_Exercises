class IsbnClass
	
	attr_reader :isbn_string

	def initialize(isbn_string) 
		@isbn_string = isbn_string
	end

#converts the input isbn string into an array containing just the digits
	def digits() 
		digits = @isbn_string.scan(/\d/).map {|isbn| isbn.to_i} 
	end

#converts the input isbn string into an array containing everything but white space and hyphens
	def non_blank()  
		non_blank   = @isbn_string.scan(/[^\s-]/)
	end

#sumcheck for isbn13
	def isbn13(digits) 
		isbn13 = (10 - digits.values_at(0..-2).map.with_index { |element, index| element * ((index%2 * 2) + 1) }.inject(:+)%10)%10
	end

#sumcheck for isbn10, normal cases
	def isbn10(digits) 
		isbn10 = (digits.values_at(0..-2).map.with_index { |element, index| element * (index + 1) }.inject(:+))%11
	end

#sumcheck for isbn10 for the cases where the last character is an 'x', which represents the number 10
	def isbn10x(digits) 
		isbn10x = (digits.map.with_index { |element, index| element * (index + 1) }.inject(:+))%11
	end

#override the default to_s method
	def to_s
		@isbn_string
	end

#check for if the isbn meets all spec requirements(see below for requirements) 
	def isbn_check() 
		if digits.count(9..13) #constrain to possible valid isbn digit lengths, to avoid unnecessary calculations
			if digits.count == 13 && non_blank.count == 13 && isbn13(digits) == digits[-1]
				isbn_check_result = :isbn13pass #if valid isbn13 
			elsif digits.count == 10 && non_blank.count == 10 && isbn10(digits) == digits[-1]
				isbn_check_result = :isbn10pass #if valid isbn10, normal case
			elsif digits.count == 9 && non_blank.count == 10 && isbn10x(digits) == 10 && non_blank[-1] == 'x'
				isbn_check_result = :isbn10pass #if valid isbn10, where the last character is 'x'
			else
				isbn_check_result = :isbnfail #if isbn contains between 9 and 13 digits but is not valid
			end
		else 
			isbn_check_result = :isbnfail #if isbn doesn't contain between 9 and 13 digits
		end
		return isbn_check_result
	end

end



# ISBN-10 is made up of 9 digits plus a check digit (which
# may be 'X') and ISBN-13 is made up of 12 digits plus a
# check digit. Spaces and hyphens may be included in a code,
# but are not significant. This means that 9780471486480 is
# equivalent to 978-0-471-48648-0 and 978 0 471 48648 0.

# The check digit for ISBN-10 is calculated by multiplying
# each digit by its position (i.e., 1 x 1st digit, 2 x 2nd
# digit, etc.), summing these products together and taking
# modulo 11 of the result (with 'X' being used if the result
# is 10).

# The check digit for ISBN-13 is calculated by multiplying
# each digit alternately by 1 or 3 (i.e., 1 x 1st digit,
# 3 x 2nd digit, 1 x 3rd digit, 3 x 4th digit, etc.), summing
# these products together, taking modulo 10 of the result
# and subtracting this value from 10, and then taking the
# modulo 10 of the result again to produce a single digit.
